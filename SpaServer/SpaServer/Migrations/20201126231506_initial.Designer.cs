// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaServer.Models;

namespace SpaServer.Migrations
{
    [DbContext(typeof(SPA_DBContext))]
    [Migration("20201126231506_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("SpaServer.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("SpaServer.Models.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("SpaServer.Models.PlaylistUserList", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID");

                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.HasKey("PlaylistId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistUserList");
                });

            modelBuilder.Entity("SpaServer.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("ArtistID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("YearCreated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("SpaServer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SpaServer.Models.Playlist", b =>
                {
                    b.HasOne("SpaServer.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Playlists_USers")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpaServer.Models.PlaylistUserList", b =>
                {
                    b.HasOne("SpaServer.Models.Playlist", "Playlist")
                        .WithMany("PlaylistUserLists")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_PlaylistUserList_Playlists")
                        .IsRequired();

                    b.HasOne("SpaServer.Models.Song", "Song")
                        .WithMany("PlaylistUserLists")
                        .HasForeignKey("SongId")
                        .HasConstraintName("FK_PlaylistUserList_Songs")
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("SpaServer.Models.Song", b =>
                {
                    b.HasOne("SpaServer.Models.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_Songs_Artists")
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("SpaServer.Models.Artist", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("SpaServer.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistUserLists");
                });

            modelBuilder.Entity("SpaServer.Models.Song", b =>
                {
                    b.Navigation("PlaylistUserLists");
                });

            modelBuilder.Entity("SpaServer.Models.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
